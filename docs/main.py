import asyncio
from telegram.ext import MessageHandler, filters
import threading
import random
import os
import http.server
import socketserver
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, MenuButtonCommands
from telegram.ext import Application, CommandHandler, ContextTypes
import nest_asyncio
# --- Telegram-–±–æ—Ç ---
nest_asyncio.apply()
# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        keyboard = [
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ", url="https://czolowek.github.io/TapKraken1/")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        with open("Cover image.png", "rb") as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=(
                    "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TapKraken! üêô\n"
                    "–ì–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –≤–µ—Å–µ–ª—å—é –∏ —ç–ø–∏—á–Ω—ã–º –∫–ª–∏–∫–∞–º? üöÄ\n\n"
                    "üí∞ –°–æ–∫—Ä–æ–≤–∏—â–∞ –∂–¥—É—Ç ‚Äî –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–π –ö—Ä–∞–∫–µ–Ω–∞ —Å–∫—É—á–∞—Ç—å! üíùüåä\n"
                    "üëá –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–≥—Ä—É–∂–∞–π—Å—è –≤ –∏–≥—Ä—É! üí•\n"
                ),
                reply_markup=reply_markup
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        help_text = (
            "‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "‚ñ∂Ô∏è /start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ TapKraken üêô\n"
            "‚ùì /help - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è—Ö\n\n"
            "üì© *–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:*\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∂–∞–ª–æ–±—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ email: "
            "[tapkraken@gmail.com](mailto:tapkraken@gmail.com)\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ WhatsApp: [+48516015761](https://wa.me/+48516015761)\n"
            "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üòä"
        )

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=help_text,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /invite
async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –®–∞–≥ 1: –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üéâ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∏–≥—Ä—É TapKraken!* üêô\n\n"
        )
        
        # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –±–∞–Ω–Ω–µ—Ä–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–µ–∑ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        with open("–±–∞–Ω–Ω–µ—Ä.webp", "rb") as banner_image:
            invite_message = (
                "üéâ *—è–π—Ü–æ –≥–ª–µ–±–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ç–µ–±—è –≤ –∏–≥—Ä—É TapKraken!* üêô"
                "üîó –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Å—Ç–∞–Ω—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ –≤–µ—Å–µ–ª–æ–≥–æ –º–∏—Ä–∞ –∫–ª–∏–∫–æ–≤: https://t.me/Tap2Kraken2Bot"
                "üí• –ü–æ–±–µ–∂–¥–∞–π, –∑–∞—Ä–∞–±–æ—Ç–∞–π Kraken üí∞ –∏ —Å—Ç–∞–Ω—å –ª—É—á—à–∏–º! üöÄ"
                "–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã –∏ –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥! üéÆ"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –±–∞–Ω–Ω–µ—Ä–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=banner_image,
                caption=invite_message
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /invite: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /rules
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rules_text = (
            "üéÆ *–ü—Ä–∞–≤–∏–ª–∞ TapKraken:*\n"
            "üëÜ –í—Å—ë –ø—Ä–æ—Å—Ç–æ ‚Äî —Ç–∞–ø–∞–π, –≤–µ—Å–µ–ª–∏—Å—å –∏ –ø–æ–±–µ–∂–¥–∞–π!\n\n"
            "üïπÔ∏è –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
            "‚ö° –ñ–º–∏ –Ω–∞ –ö—Ä–∞–∫–µ–Ω–∞, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å *Kraken Coin ü™ô*\n"
            "üìà –ß–µ–º –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç ‚Äî —Ç–µ–º –≤—ã—à–µ —Ç—ã –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!\n"
            "üîÑ –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∏ –∫—Ä—É—Ç–æ–≥–æ!\n\n"
            "üö´ *–ß—Ç–æ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å:*\n"
            "‚ùå –ü–∏—Å–∞—Ç—å –≥–∞–¥–æ—Å—Ç–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç –∏ —Ç–æ–∫—Å–∏—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã\n"
            "‚ùå –ü—Ä–∏–º–µ–Ω—è—Ç—å —á–∏—Ç—ã –∏–ª–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã\n\n"
            "üåü –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∫–∞–π—Ñ–∞! –£–≤–∞–∂–∞–π –¥—Ä—É–≥–∏—Ö –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∏–≥—Ä–æ–π üíú\n"
            "üë´ –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π –∏ –¥–µ–ª–∞–π—Ç–µ –∫—Ä–∞–∫–µ–Ω–æ–≤ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º–∏ –≤–º–µ—Å—Ç–µ! üêô"
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=rules_text,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /rules: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /review (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤)
async def review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∏–ª–∏ –∏–≥—Ä–µ:\n\n"
                 "üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, –∏ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å. –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! üòä",
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /review: {e}")

# –°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤
async def collect_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        feedback_message = update.message.text
        username = update.effective_user.username or update.effective_user.first_name

        with open("otzivi.txt", "a", encoding="utf-8") as file:
            file.write(f"–û—Ç–∑—ã–≤ –æ—Ç {username}: {feedback_message}\n")

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üí¨ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–µ–º –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –∏–≥—Ä—É –µ—â—ë –ª—É—á—à–µ! üéÆüòä"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –æ—Ç–∑—ã–≤–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /info
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        info_text = (
            "üßë‚Äçüíª *–û –±–æ—Ç–µ:*\n\n"
            "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∏–≥—Ä–æ–π TapKraken.\n"
            "–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤. –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!"
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=info_text,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /info: {e}")

# –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
def run_server():
    os.chdir("c:/Users/ProLogix/Desktop/taptaphomak/docs")
    PORT = 5000
    Handler = http.server.SimpleHTTPRequestHandler

    if not os.path.exists("index.html"):
        print("–û—à–∏–±–∫–∞: –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
        return

    try:
        with socketserver.TCPServer(("", PORT), Handler) as httpd:
            print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:{PORT}")
            httpd.serve_forever()
    except OSError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        # –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        server_thread = threading.Thread(target=run_server)
        server_thread.daemon = True
        server_thread.start()

        application = Application.builder().token("8160638043:AAGVn4wvRKKamkSPrfoxWDv19LTp3mSFFU8").build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("invite", invite))
        application.add_handler(CommandHandler("rules", rules))
        application.add_handler(CommandHandler("review", review))  # –û—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ /review
        application.add_handler(CommandHandler("info", info))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, collect_feedback))

        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        commands = [
            BotCommand("start", "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
            BotCommand("help", "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"),
            BotCommand("invite", "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä—É"),
            BotCommand("rules", "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"),
            BotCommand("review", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"),
            BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
            BotCommand("leaderboard", "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        ]
        await application.bot.set_my_commands(commands)

        # –ù–∞—Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        menu_buttons = [
            InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='/start'),
            InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data='/rules'),
            InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data='/review'),
            InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='/help'),
            InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data='/info')
        ]
        menu_markup = InlineKeyboardMarkup([menu_buttons])

        await application.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        print("–ö–Ω–æ–ø–∫–∞ Menu —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
        await application.run_polling()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())  # –†–∞–±–æ—Ç–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è nest_asyncio
